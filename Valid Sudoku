public class Solution {

	public static boolean isItSudoku(int matrix[][]) {

		// Write your code here.
		if(solve(matrix))
 {
  return true;
 }
 return  false;
}
static boolean  solve(int[][] board)
{
 boolean NoEmptyCells = true;
    int n = board.length;
 int row = -1;
 int col = -1;

 for(int r=0; r<n; r++)
 {
  for(int c=0; c<n; c++)
  {
   if(board[r][c] == 0)
   {
    row = r;
    col = c;
    NoEmptyCells = false;
    break;
   }
  }
  if(NoEmptyCells == false)
  {
   break;
  }
 }
 if(NoEmptyCells == true)
 {
  return true;
 }
   


//Placing the Number
for(int num=1; num<=9; num++)
{
    if(isSafe(board, row, col, num))
    {
  board[row][col] = num;
  if(solve(board))
  {
   //fount the answer
   return true;
  }
  else{
  //BackTRack
  board[row][col] = 0;
  }
 }

}  
return false;
}

static boolean isSafe(int[][] board, int row, int col, int num)
{

      //Check Rows 
   for(int c=0; c<board.length; c++)
   {
    if(board[row][c] == num)
    {
     return false;
    }
   }

   //Check Columns
   for(int i=0; i<board.length; i++)
   {
    if(board[i][col] == num)
    {
     return false;
    }
   }

   //Checking 3*3 Box

   int sqrt = (int)Math.sqrt(board.length);
   int rowStart = row - row % sqrt;
   int colStart = col - col % sqrt;

   for(int r=rowStart; r < rowStart + sqrt; r++)
   {
    for(int c = colStart; c < colStart + sqrt; c++)
    {
     if(board[r][c] == num)
     {
      return false;
     }
    }
   }
   
return true;

	}
}
